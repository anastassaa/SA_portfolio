openapi: 3.0.0

servers:
  - description: Тестовая площадка
    url: https://test.bookworm.ru/api
  - description: Продуктовая площадка
    url: https://bookworm.ru/api
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/AnastasiyaM/DemoProject_bookstore/1.0.0
info:
  description: |
    Мой первый проект API

    ### Основные возможности

    **Пользователи:**  
    - Регистрируются через веб- или мобильное приложение  
    - Получают доступ к списку книг
    - Могут искать книги с использованием фильтров
    - Могут оформлять заказ
    - Могут вносить изменения в свой заказ
    - Могут отменять свой заказ

    **Администраторы платформы:**  
    - Добавляют новые книги  
    - Редактируют или удаляют существующие  
    - Просматривают список пользователей  
    - Блокируют и активируют аккаунты
    - Редактируют или отменяют заказы

  version: "1.0.0"
  title: Bookstore - книжный онлайн магазин
  contact:
    email: bookworm@your-company.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: admins
    description: Secured Admin-only calls
  - name: users
    description: Operations available to regular users and admins
paths:
  /books/{id}:
    get:
      tags:
        - users
      summary: Returns a single book
      operationId: getBookById
      description: |
        By passing in the appropriate options, you can search for
        available inventory in the system
      parameters:
        - in: path
          name: id
          description: ID of book to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/books'
            application/xml:
              schema:
                $ref: '#/components/schemas/books'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden
        '404':
          description: Book not found
        '422':
          description: Validation exception
    delete:
      tags:
        - admins
      summary: Delete a book
      operationId: deleteBook
      parameters:
        - in: path
          name: id
          description: ID of book to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Successful deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden
        '404':
          description: Book not found
        '422':
          description: Validation exception
  /books/findByName:
    get:
      tags:
        - users
      summary: Finds books by name
      operationId: findBooksByName
      parameters:
        - in: query
          name: title
          description: name of book to return
          required: true
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                # ИСПРАВЛЕНО: Возвращается массив объектов books, а не один объект
                type: array
                items:
                  $ref: '#/components/schemas/books'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/books'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden
        '404':
          description: Book not found
        '422':
          description: Validation exception
  /books/findByStatus:
    get:
      tags:
        - users
      summary: Finds books by status
      operationId: findBooksByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/books'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/books'
        '400':
          description: bad input parameter
        '404':
          description: not found
  /books/findByGenre:
    get:
      tags:
        - users
      summary: Finds books by genre
      description: Multiple status values can be provided with comma separated strings
      operationId: findBooksByGenre
      parameters:
        - name: genre
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            enum:
              - Detective
              - Adventure
              - Cooking
              - History
              - Business
              - Education
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/books'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/books'
        '400':
          description: bad input parameter
        '404':
          description: not found
  /books/findByAll:
    get:
      tags:
        - users
      summary: Finds books by all parameters
      operationId: findBooksByAll
      parameters:
        - in: query
          name: text
          description: 'Search by book title, authors name, publishers name, ISBN. (Limit: a string of up to 128 characters).'
          schema:
            type: string
          example: 'Текст для поиска'
        - in: query
          name: limit
          description: maximum number of records to return
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/books'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/books'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden
        '404':
          description: Book not found
        '422':
          description: Validation exception
  /books:
    post:
      tags:
        - admins
      summary: Add a new book to the store
      operationId: AddBook
      requestBody:
        description: Create a new book in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/books'
          application/xml:
            schema:
              $ref: '#/components/schemas/books'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/books'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden
        '409':
          description: The object already exists
        '422':
          description: Validation exception
      security:
        - api_key: []
    put:
      tags:
        - admins  
      summary: Updates a book in the store with form data
      operationId: UpdateBook
      parameters:
        - in: query
          name: id
          description: ID of book to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Update an existent book in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/books'
          application/xml:
            schema:
              $ref: '#/components/schemas/books'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/books'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/books'
            application/xml:
              schema:
                $ref: '#/components/schemas/books'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden
        '404':
          description: Book not found
        '422':
          description: Validation exception
      security:
        - api_key: []
  /order:
    post:
      tags:
        - admins
      summary: Place an order for a book
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orders'
          application/xml:
            schema:
              $ref: '#/components/schemas/orders'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/orders'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orders'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden
        '409':
          description: The object already exists
        '422':
          description: Validation exception
      security:
        - bookworm_auth:
            - write:books
            - read:books
    put:
      tags:
        - users
      summary: Сhange the data in the order
      description: Update a order in the store
      operationId: UpdateOrder
      parameters:
        - in: query
          name: orderId
          description: ID of order to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orders'
          application/xml:
            schema:
              $ref: '#/components/schemas/orders'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/orders'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orders'
            application/xml:
              schema:
                $ref: '#/components/schemas/orders'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden
        '404':
          description: Order not found
        '422':
          description: Validation exception
      security:
        - api_key: []
  /order/{orderId}:
    get:
      tags:
        - users
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orders'
            application/xml:
              schema:
                $ref: '#/components/schemas/orders'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - admins
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Order successfully deleted
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /employees:
    get:
      tags:
        - admins
      summary: searches employees
      operationId: searchEmployees
      description: |
        By passing in the appropriate options, you can search for
        available inventory in the system
      parameters:
        - in: query
          name: searchString
          description: pass an optional search string for looking up inventory
          required: false
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/employees'
        '400':
          description: bad input parameter
    post:
      tags:
        - admins
      summary: Add employees
      operationId: addEmployees
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/employees'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/employees'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
    patch:
      tags:
        - admins
      summary: Сhange the data in the Employee
      operationId: UpdateEmployees
      parameters:
        - in: query
          name: id
          description: ID of employee to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/employees'
      responses:
        '200':
          description: Employee successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/employees'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
components:
  schemas:
    books:
      type: object
      required:
        - id
        - title
        - genre
        - author
        - published_year
        - number
        - rating
        - isbn
        - cover
        - publisher
        - desctiption
        - feedback
        - createDate
        - status
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        title:
          type: string
          example: Над пропастью во ржи
        genre:
          type: string
          example: Romance
        published_year:
          type: integer
          example: 2010
        number:
          type: integer
          example: 32
        rating:
          type: number
          example: 4.9
        isbn:
          type: string
          example: 978-3-16-148410-0
        cover:
          type: string
          example: "http//image.jpg"
        status:
          type: string
          example: available
        publisher:
          type: string
          example: "Феникс"
        # ИСПРАВЛЕНО: Добавлено отсутствующее свойство desctiption
        desctiption:
          type: string
          example: "Описание книги"
        createDate:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        author:
          $ref: '#/components/schemas/author'
        feedback:
          $ref: '#/components/schemas/feedback'
          
    author:
      type: array
      items:
        anyOf:
          - $ref: "#/components/schemas/author1"
          - $ref: "#/components/schemas/author2"
          
    author1:  
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        firstName:
          type: string
          example: "Имя автора"
        lastName:
          type: string
          example: 'Фамилия автора'
        biography:
          type: string
          example: "Краткая биография автора"
          
    author2:  
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        firstName:
          type: string
          example: "Имя автора"
        lastName:
          type: string
          example: 'Фамилия автора'
        biography:
          type: string
          example: "Краткая биография автора"
    feedback:
      type: array
      items:
        anyOf:
          - $ref: "#/components/schemas/feedback1"
          - $ref: "#/components/schemas/feedback2"
          
    feedback1:  
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          example: d290SAee-6c54-4b01-90e6-d701748f0851
        userName:
          type: string
          example: "Имя пользователя"
        photo:
          type: string
          format: url
          example: "http//image.jpg"
        description:
          type: string
          example: "Текс отзыва"
        rating:
          type: number
          example: 4.5
          
    feedback2:  
      type: object
      required:
        - id
      properties:    
        id:
          type: string
          format: uuid
          example: d290SAes-6c54-4b01-90e6-d701748f0111
        userName:
          type: string
          example: "Имя пользователя"
        photo:
          type: string
          format: url
          example: "http//image2.jpg"
        description:
          type: string
          example: "Текс отзыва"
        rating:
          type: number
          example: 3.8
          
    orders:
      type: object
      required:
        - id
        - book_id
        - user
        - createDate
        - status
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        status:
          type: string
          example: waiting
        createDate:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        bookInfo:
          $ref: '#/components/schemas/bookInfo'
        user:
          type: string
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        address:
          type: string
          example: г. Москва, Новый Арбрат, д.1, кв. 10
        deliveryDate:
          type: string
          format: date
          example: '2025-01-29'
        book_id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748fss51
          
    bookInfo:  
      type: object
      required:
        - book_id
      properties:    
        book_id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748fss51
        bookName:
          type: string
          example: "Название книги"
        booksCount:
          type: integer
          example: 1
          
    employees:      
      type: object
      required:
        - id
      properties:    
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748fss51
        firstName:
          type: string
          example: "Имя сотрудника"
        lastName:
          type: string
          example: 'Фамилия сотрудника'
        post:
          type: string
          example: Менеджер
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
          example: IncorrectRequestBody
        message:
          type: string
          example: "Некорректное тело запроса"
      xml:
        name: '##default'
  securitySchemes:
    bookworm_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://bookworm.swagger.io/oauth/authorize
          scopes:
            write:books: modify books in your account
            read:books: read your books
    api_key:
      type: apiKey
      name: api_key
      in: header